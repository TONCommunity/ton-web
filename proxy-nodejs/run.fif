#!/usr/bin/env fift -s
"../util.fif" include

$1 =: _code
$2 =: _data
$3 =: path
$4 (number) drop =: timestamp

_code file>B B>boc <s =: code
_data file>B B>boc =: data

0 tuple 0x076ef1ea , // magic
0 , 0 , // actions msg_sents
timestamp , // unix_time
1 , 1 , 0 , // block_lt, trans_lt, rand_seed
0 tuple 9223372036854775807 , dictnew , , // remaining balance
0 , dictnew , // contract_address, global_config
1 tuple // wrap to another tuple
constant c7 

path strslice "get" calcid code data c7 runvmctx
drop // new storage
0 <> {
	99 halt
} if


variable b
variable 'parsetree
{ 'parsetree @ execute } : parsetree 
{ // slice -- B
	dup dup sbits 8 / B@ B>$ type

	dup srefs {
		ref@+ <s parsetree
	} swap times
	drop
} 'parsetree !


variable T
variable c

dup tuple? {
	T !
	T @ count c !
	c @ 1 = {
		T @ 0 [] (.) type cr
	} {
		c @ 2 = {
			T @ 0 [] (.) type cr cr
			T @ 1 [] dup null? {
				."(null)"
			} {
				parsetree
			} cond
		} {
			T @ 0 [] (.) type ."+" cr
			T @ 1 [] dup null? {
				."(null)"
			} {
				parsetree
			} cond cr cr
			T @ 2 [] dup null? {
				."(null)"
			} {
				parsetree
			} cond
		} cond
	} cond
} {
	."received not a tuple:" cr
	.s
	// dup 0 [] (.) type ."="
	// dup 1 [] null? { ."(null)" } {
		// csr.
	// } cond
	1 halt
} cond
